{
  "active": false,
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "HTTP 1m",
            "type": "main",
            "index": 0
          },
          {
            "node": "Stock News Articles1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 15m",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 1h",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter News Articles1": {
      "main": [
        [
          {
            "node": "Sentiment Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Analysis1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP 1m": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP 15m": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP 1h": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Stock News Articles1": {
      "main": [
        [
          {
            "node": "Filter News Articles1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zep": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-28T16:16:45.489Z",
  "id": "Vz7aQzIxr6AVQ2D4",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Borsa -yatırım",
  "nodes": [
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        544,
        192
      ],
      "id": "888b3585-1e10-4bf7-8f26-dd77eea17c15",
      "name": "Merge"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -368,
        208
      ],
      "id": "79282db3-ee69-4cf8-8b38-7e913a965ef2",
      "name": "Telegram Trigger",
      "webhookId": "ca2a478b-dbad-455f-a3ff-cafac2f5c57b",
      "credentials": {
        "telegramApi": {
          "id": "HUdGoFwFzsUDSVqU",
          "name": "BİLMİŞ"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        768,
        192
      ],
      "id": "01340e1e-e9a4-4d61-bd99-a5b9024b6a77",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// Güvenli veri erişimi\nconst items = $input.all();\nif (!items || items.length === 0) {\n  return [{\n    json: {\n      error: \"Gelen veri bulunamadı\",\n      success: false\n    }\n  }];\n}\n\nconst root = items[0].json;\n\n// Debug: Gelen veri yapısını kontrol et\nconsole.log('Root data structure:', JSON.stringify(root, null, 2));\n\n// Veri yapısını güvenli şekilde kontrol et\nif (!root || !root.data || !Array.isArray(root.data)) {\n  return [{\n    json: {\n      error: \"Beklenen veri yapısı bulunamadı. 'data' array'i mevcut değil.\",\n      received: root,\n      success: false\n    }\n  }];\n}\n\n// Veri setlerini güvenli şekilde çıkar\nconst data1m = root.data[0];   // 1min\nconst data15m = root.data[1];  // 15min  \nconst data1h = root.data[2];   // 1h\n\n// Her veri setinin varlığını kontrol et\nconst datasets = [\n  { name: '1m', data: data1m },\n  { name: '15m', data: data15m },\n  { name: '1h', data: data1h }\n];\n\nfor (const dataset of datasets) {\n  if (!dataset.data) {\n    return [{\n      json: {\n        error: `${dataset.name} verisi bulunamadı`,\n        availableDataCount: root.data.length,\n        success: false\n      }\n    }];\n  }\n  \n  if (!dataset.data.meta || !dataset.data.meta.symbol) {\n    return [{\n      json: {\n        error: `${dataset.name} meta bilgisi veya symbol bulunamadı`,\n        dataStructure: Object.keys(dataset.data),\n        success: false\n      }\n    }];\n  }\n  \n  if (!dataset.data.values || !Array.isArray(dataset.data.values)) {\n    return [{\n      json: {\n        error: `${dataset.name} values array'i bulunamadı`,\n        success: false\n      }\n    }];\n  }\n}\n\n// Veri normalleştirme fonksiyonu - hata kontrolü ile\nfunction normalize(values) {\n  if (!Array.isArray(values)) {\n    console.log('Values is not an array:', values);\n    return [];\n  }\n  \n  return values\n    .filter(v => v && v.datetime) // Geçersiz değerleri filtrele\n    .map(v => {\n      try {\n        return {\n          time: new Date(v.datetime),\n          open: parseFloat(v.open) || 0,\n          high: parseFloat(v.high) || 0,\n          low: parseFloat(v.low) || 0,\n          close: parseFloat(v.close) || 0,\n          volume: parseFloat(v.volume) || 0,\n        };\n      } catch (error) {\n        console.log('Error processing value:', v, error);\n        return null;\n      }\n    })\n    .filter(v => v !== null) // Null değerleri çıkar\n    .sort((a, b) => a.time - b.time);\n}\n\ntry {\n  // Sonuç döndür\n  const result = {\n    json: {\n      ticker: data1m.meta.symbol,\n      candles1m: normalize(data1m.values),\n      candles15m: normalize(data15m.values),\n      candles1h: normalize(data1h.values),\n      success: true,\n      processedAt: new Date().toISOString(),\n      dataInfo: {\n        totalCandles1m: data1m.values.length,\n        totalCandles15m: data15m.values.length,\n        totalCandles1h: data1h.values.length\n      }\n    }\n  };\n  \n  console.log('Successfully processed data for:', data1m.meta.symbol);\n  return [result];\n  \n} catch (error) {\n  return [{\n    json: {\n      error: \"Veri işleme hatası: \" + error.message,\n      success: false,\n      stack: error.stack\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        192
      ],
      "id": "57e0ad21-6adc-4d6c-927e-e768dc21b8ce",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const articles = $json.articles || [];\nconst filteredArticles = articles.map(article => ({\n  title: article.title,\n  description: article.description,\n}));\n\nreturn [{\n  json: {\n    filteredArticles\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        640
      ],
      "id": "aef03e60-1850-4f73-8aff-79e68d647cab",
      "name": "Filter News Articles1"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a highly intelligent and accurate sentiment analyzer specializing in the financial markets. Analyze the sentiment of the provided text \n\n   - Evaluate the immediate market reaction, recent news impact, and technical volatility.\n   - Determine a sentiment category: \"Positive\", \"Neutral\", or \"Negative\".\n   - Calculate a numerical score between -1 (extremely negative) and 1 (extremely positive).\n   - Provide a concise rationale explaining the short-term sentiment (give a detailed response with appropriate headlines for major events. \n\n\nYour output must be exactly a JSON object. The value  must be an object with three keys: \"category\", \"score\", and \"rationale\". Do not output any additional text.\n\nFor example, your output should look like:\n\n{\n  \"shortTermSentiment\": {\n    \"category\": \"Positive\",\n    \"score\": 0.7,\n    \"rationale\": \"....\"\n\nNow, analyze the following text and produce your JSON output:\n{{ JSON.stringify($json.filteredArticles) }}\n",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        448,
        640
      ],
      "id": "f59d4e5d-fc00-4122-b056-f389320fc42d",
      "name": "Sentiment Analysis1",
      "credentials": {
        "openAiApi": {
          "id": "mdSO9YkBfKgrkvfQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1200,
        208
      ],
      "id": "85302c41-8804-4aad-aea8-e8f226008c41",
      "name": "Merge2"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1424,
        208
      ],
      "id": "2834bda9-50dd-4bf7-a794-5d28754870cb",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert day trader. Using the data below, please give a single, unified trade recommendation—Buy, Sell, or Hold—based on both price action (1m, 15m, 1h candles) and 24h sentiment. Then provide:\n\n• Technical Recommendation (Buy, Sell, or Hold; incorporating candle analysis and sentiment)  \n• Entry Price  \n• Stop-Loss  \n• Target/Exit Price  \n\nProvide your answer as plain text with bullet points and clear line breaks.\n\nTechnical Data (candles):  \n{{ JSON.stringify($json.data[0]) }}\n\nSentiment Analysis (past 24h):  \n{{ JSON.stringify($json.data[1]) }}\n\nEach candle object has:  \n– timeframe: \"1m\", \"15m\", or \"1h\"  \n– candles: [openTime, open, high, low, close, volume, …]\n\nSteps for the agent:  \n1. Group candles by timeframe (1m, 15m, 1h).  \n2. Use 1m & 15m action + indicators (RSI, MACD, trendlines) for optimal entry.  \n3. Confirm trend with 1h data.  \n4. Factor in sentiment to refine the Buy/Sell/Hold call.  \n\n### Response format (no extra text!):  \n• Technical Recommendation: <BUY|SELL|HOLD>  \n• Entry Price: <number>  \n• Stop-Loss: <number>  \n• Target/Exit Price: <number>\n\n\nUse the zep memory tool and also pinecone vector store in every run but do not use information coming from them just use them. USe vector store and get information each time.",
        "options": {
          "systemMessage": "You are an expert day trader. ONLY output exactly the lines below—no rationale, no extra commentary.\nAlways cehck vector store too.\n### Response format (absolutely no other text!)\n• Technical Recommendation: <BUY|SELL|HOLD>\n• Entry Price: <number or N/A>\n• Stop-Loss: <number or N/A>\n• Target/Exit: <number or N/A>\n• Hold or Exit Decision: <Hold|Exit>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1600,
        208
      ],
      "id": "d646f949-8b46-49fd-b362-8f5cb038ff30",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1312,
        464
      ],
      "id": "3fe2de02-6424-48e8-91fe-1b921748b77d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "mdSO9YkBfKgrkvfQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Telegram Trigger').item.json.message.text.trim().toUpperCase() }}"
            },
            {
              "name": "interval",
              "value": "1min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "7c106d67fa934397b6c30cf5e6bcd711"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        16
      ],
      "id": "cc692525-7db1-4e65-9ac8-631d38477a7b",
      "name": "HTTP 1m"
    },
    {
      "parameters": {
        "url": "=https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Telegram Trigger').item.json.message.text.trim().toUpperCase() }}"
            },
            {
              "name": "interval",
              "value": "15min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "7c106d67fa934397b6c30cf5e6bcd711"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        208
      ],
      "id": "5b9b6def-0b16-4732-b276-2eeeeb0d2cce",
      "name": "HTTP 15m"
    },
    {
      "parameters": {
        "url": "=https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Telegram Trigger').item.json.message.text }}"
            },
            {
              "name": "interval",
              "value": "1h"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "7c106d67fa934397b6c30cf5e6bcd711"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        416
      ],
      "id": "c8ccb1bb-1bce-42d1-869d-1ec27691b52b",
      "name": "HTTP 1h"
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/everything",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $('Telegram Trigger').item.json.message.text }}"
            },
            {
              "name": "from",
              "value": "={{$today.minus({ days: 1 }).toFormat('yyyy-MM-dd')}}\n"
            },
            {
              "name": "sortBy",
              "value": "popularity"
            },
            {
              "name": "apiKey",
              "value": "4aae4e91000449108c484467284352ea"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        640
      ],
      "id": "f1f2970d-4462-4570-960a-2f7b3ac10bf2",
      "name": "Stock News Articles1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=1"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryZep",
      "typeVersion": 1.3,
      "position": [
        1520,
        480
      ],
      "id": "44be077e-c7b1-40f0-9cf3-eb92673abdcd",
      "name": "Zep",
      "credentials": {
        "zepApi": {
          "id": "FSqIbPoe5PldrXUz",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "borsa",
        "toolDescription": "use this tool to retrieve information from ai investors knowldge base",
        "pineconeIndex": {
          "__rl": true,
          "value": "c010121a-4994-4baa-9540-bcfce2a19d8b",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        1712,
        544
      ],
      "id": "f7b2748b-0ca4-4c3d-8ef3-9d415e82c5f5",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "U6NLcCgwKurU7cQN",
          "name": "PineconeApi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1648,
        752
      ],
      "id": "3763e17e-21c3-4e4b-a5e7-39a5e29ce979",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "mdSO9YkBfKgrkvfQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1968,
        208
      ],
      "id": "b0f93f8c-b06b-4171-ad1d-1c380be687b4",
      "name": "Send a text message",
      "webhookId": "8231d275-5b3a-4b89-842c-491d143478de",
      "credentials": {
        "telegramApi": {
          "id": "HUdGoFwFzsUDSVqU",
          "name": "BİLMİŞ"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-07-28T16:16:45.489Z",
      "updatedAt": "2025-07-28T16:16:45.489Z",
      "role": "workflow:owner",
      "workflowId": "Vz7aQzIxr6AVQ2D4",
      "projectId": "O3f0VXsCOyNYdqZx"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-07-28T17:54:47.429Z",
  "versionId": "cd327607-3435-46e9-9b7b-5e825288c595"
}